# render.yaml (v2) — production‑ready with expert additions; original lines remain unchanged
# This file defines the "Infrastructure as Code" for your application on Render.

services:
  # Service 1: The PostgreSQL Database
  # This tells Render to create a free-tier managed database for us.
  - type: db
    name: ai-genesis-dbnew
    plan: free
    postgresMajorVersion: 16
    region: oregon # Make sure this matches your web service region
    # --- Expert additions ----------------------------------------------------
    databaseExtensions:
      - citext        # Case‑insensitive text for flexible queries
      - pg_trgm       # Trigram search for fuzzy matching
    ipAllowList: []   # Empty list keeps it private; add CIDRs to expose
    # Backup retention is 7 days on free plan; upgrade plan for longer retention
    # ------------------------------------------------------------------------

  # Service 3: The Redis instance for Celery
  # This provides the message broker for our background tasks.
  - type: redis
    name: ai-genesis-redis
    plan: free
    region: oregon
    ipAllowList: [] # Allows other services in the account to connect
    # --- Expert additions ----------------------------------------------------
    maxmemoryPolicy: allkeys-lru  # Eviction strategy for memory cap
    # ------------------------------------------------------------------------

  # Service 2: The Flask Web Service
  # This defines our main application, built from the Dockerfile.
  - type: web
    name: AI-Genesis-Engine
    runtime: docker
    region: oregon # Make sure this matches your database region
    plan: free # Can be upgraded to 'starter' later if you need more resources

    # This tells Render what to check to see if your app is healthy and running.
    healthCheckPath: /healthz

    # This command runs when the image is built. It only installs dependencies.
    buildCommand: "pip install -r requirements.txt"

    # The command to start the production web server. It first applies database
    # migrations and then starts Gunicorn. This ensures the database is ready.
    startCommand: "flask db upgrade && gunicorn --bind 0.0.0.0:$PORT wsgi:app"

    # --- Expert additions ----------------------------------------------------
    autoDeploy: true            # Trigger deploys automatically on new commits
    branch: main                # Change if your default branch differs
    readyTimeoutSeconds: 300    # Increase startup timeout for migrations
    # ------------------------------------------------------------------------

    envVars:
      - key: SERVICE_TYPE
        value: web
      # This forces Flask to run in a production-ready mode.
      - key: FLASK_CONFIG
        value: prod
      - key: FLASK_APP
        value: app
      
      # This links the database to the web service.
      # It takes the connection string from the 'ai-genesis-db' service defined above
      # and makes it available to our app as the 'DATABASE_URL' environment variable.
      - fromDatabase:
          name: ai-genesis-dbnew
          property: connectionString
        key: DATABASE_URL
      
      # This links the Redis instance to our services.
      - fromService:
          type: redis
          name: ai-genesis-redis
          property: connectionString
        key: CELERY_BROKER_URL
      - fromService:
          type: redis
          name: ai-genesis-redis
          property: connectionString
        key: CELERY_RESULT_BACKEND
      
      # We tell Render that all these other keys will be provided manually
      # in the dashboard secrets. 'sync: false' prevents Render from overwriting them.
      - key: SECRET_KEY
        sync: false
      - key: STRIPE_PUBLISHABLE_KEY
        sync: false
      - key: STRIPE_SECRET_KEY
        sync: false
      - key: STRIPE_PRICE_ID
        sync: false
      - key: STRIPE_WEBHOOK_SECRET
        sync: false
      - key: OPENAI_API_KEY
        sync: false
      - key: GOOGLE_API_KEY
        sync: false
      - key: HF_API_KEY
        sync: false
      - key: SERPER_API_KEY
        sync: false
      - key: SENTRY_DSN
        sync: false
      # --- Expert additions --------------------------------------------------
      - key: PYTHONUNBUFFERED
        value: "1"               # Ensures stdout/stderr flush immediately
      - key: GUNICORN_CMD_ARGS
        value: "--workers=2 --threads=4" # Tune based on CPU cores
      # ----------------------------------------------------------------------

  # Service 4: The Celery Worker
  # This service runs the background tasks.
  - type: worker
    name: ai-genesis-worker
    runtime: docker
    region: oregon
    plan: free

    # The command to start the Celery worker.
    startCommand: "celery -A celery_worker.celery worker --loglevel=info"

    # --- Expert additions ----------------------------------------------------
    autoDeploy: true
    branch: main
    # ------------------------------------------------------------------------

    envVars:
      - key: FLASK_CONFIG
        value: prod
      - key: FLASK_APP
        value: app
      - fromDatabase:
          name: ai-genesis-dbnew
          property: connectionString
        key: DATABASE_URL
      - fromService:
          type: redis
          name: ai-genesis-redis
          property: connectionString
        key: CELERY_BROKER_URL
      - fromService:
          type: redis
          name: ai-genesis-redis
          property: connectionString
        key: CELERY_RESULT_BACKEND
      - key: SECRET_KEY
        sync: false
      - key: STRIPE_PUBLISHABLE_KEY
        sync: false
      - key: STRIPE_SECRET_KEY
        sync: false
      - key: STRIPE_PRICE_ID
        sync: false
      - key: STRIPE_WEBHOOK_SECRET
        sync: false
      - key: OPENAI_API_KEY
        sync: false
      - key: GOOGLE_API_KEY
        sync: false
      - key: HF_API_KEY
        sync: false
      - key: SERPER_API_KEY
        sync: false
      - key: SENTRY_DSN # For error tracking
        sync: false
      # --- Expert additions --------------------------------------------------
      - key: CELERY_CONCURRENCY
        value: "4"               # Adjust based on CPU/memory
      # ----------------------------------------------------------------------
