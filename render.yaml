# render.yaml (v3) ‚Äî logging‚Äëenhanced start command & clear env‚Äëvar placeholders
# This file defines the "Infrastructure as Code" for your application on Render.
# Update: added explicit logging to the web service startCommand so deploy logs reveal
# which step fails (DB migrations vs. Gunicorn launch).

services:
  # ---------------------------------------------------------------------------
  # Service 1: PostgreSQL
  # ---------------------------------------------------------------------------
  - type: db
    name: ai-genesis-dbnew
    plan: free
    postgresMajorVersion: 16
    region: oregon          # Keep region aligned across all services

  # ---------------------------------------------------------------------------
  # Service 2: Redis (Celery broker/result backend)
  # ---------------------------------------------------------------------------
  - type: redis
    name: ai-genesis-redis
    plan: free
    region: oregon
    ipAllowList: []         # Allows other services in the account to connect

  # ---------------------------------------------------------------------------
  # Service 3: Flask / Gunicorn Web Service
  # ---------------------------------------------------------------------------
  - type: web
    name: AI-Genesis-Engine
    runtime: docker         # Built via Dockerfile in repo root
    region: oregon
    plan: free              # Upgrade to "starter" if you need >512‚ÄØMB RAM

    healthCheckPath: /healthz   # Route must return HTTP¬†200 (see app.py)

    buildCommand: "pip install -r requirements.txt"  # Docker copies reqs; this re‚Äëconfirms deps

    # Added verbose logging around each phase so Render logs show progress
    startCommand: >
      echo '‚è≥¬†Running DB migrations‚Ä¶' && \
      flask db upgrade && \
      echo '‚úÖ¬†DB migrations done' && \
      echo 'üöÄ¬†Starting Gunicorn on $PORT' && \
      gunicorn --log-level debug --access-logfile - --bind 0.0.0.0:$PORT wsgi:app

    envVars:
      # --- Fixed values ---
      - key: SERVICE_TYPE
        value: web
      - key: FLASK_CONFIG
        value: prod
      - key: FLASK_APP
        value: app

      # --- From other Render services ---
      - fromDatabase:
          name: ai-genesis-dbnew
          property: connectionString
        key: DATABASE_URL
      - fromService:
          type: redis
          name: ai-genesis-redis
          property: connectionString
        key: CELERY_BROKER_URL
      - fromService:
          type: redis
          name: ai-genesis-redis
          property: connectionString
        key: CELERY_RESULT_BACKEND

      # --- Secrets you must fill manually in Render¬†‚ñ∏¬†Environment tab ---
      #    (each key set as "Secret" scope, sync:false keeps Render from overwriting)
      - key: SECRET_KEY             # Flask session secret ‚Üí generate via openssl rand -hex 32
        sync: false
      - key: STRIPE_PUBLISHABLE_KEY # Stripe dashboard ‚Üí Developers ‚ñ∏¬†API keys ‚ñ∏¬†Publishable
        sync: false
      - key: STRIPE_SECRET_KEY      # Stripe secret key (starts with sk_live_‚Ä¶)
        sync: false
      - key: STRIPE_PRICE_ID        # Price ID from Stripe product (price_‚Ä¶)
        sync: false
      - key: STRIPE_WEBHOOK_SECRET  # Stripe CLI: stripe listen --forward-to ‚Ä¶
        sync: false
      - key: OPENAI_API_KEY         # OpenAI dashboard ‚ñ∏¬†API keys
        sync: false
      - key: GOOGLE_API_KEY         # Google Cloud console ‚ñ∏¬†APIs & Services ‚ñ∏¬†Credentials
        sync: false
      - key: HF_API_KEY             # HuggingFace token (Settings ‚ñ∏¬†Access Tokens)
        sync: false
      - key: SERPER_API_KEY         # serper.dev key (after signup)
        sync: false
      - key: SENTRY_DSN             # Sentry project settings ‚ñ∏¬†DSN
        sync: false

  # ---------------------------------------------------------------------------
  # Service 4: Celery Worker
  # ---------------------------------------------------------------------------
  - type: worker
    name: ai-genesis-worker
    runtime: docker
    region: oregon
    plan: free

    startCommand: "celery -A celery_worker.celery worker --loglevel=info"

    envVars:
      - key: FLASK_CONFIG
        value: prod
      - key: FLASK_APP
        value: app
      - fromDatabase:
          name: ai-genesis-dbnew
          property: connectionString
        key: DATABASE_URL
      - fromService:
          type: redis
          name: ai-genesis-redis
          property: connectionString
        key: CELERY_BROKER_URL
      - fromService:
          type: redis
          name: ai-genesis-redis
          property: connectionString
        key: CELERY_RESULT_BACKEND

      # Same manual secrets as web service (optional for worker unless used)
      - key: SECRET_KEY
        sync: false
      - key: OPENAI_API_KEY
        sync: false
      - key: SENTRY_DSN
        sync: false
